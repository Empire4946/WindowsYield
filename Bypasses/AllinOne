-- Memory Bypass V1
task.spawn(function()
    repeat task.wait() until game:IsLoaded()

    local RunService = game:GetService("RunService")
    local Stats = game:GetService("Stats")

    local CurrMem = Stats:GetTotalMemoryUsageMb()
    local Rand = 0

    RunService.Stepped:Connect(function()
        local random = Random.new()
        Rand = random:NextNumber(-10, 10)
    end)

    local function GetReturn()
        return CurrMem + Rand
    end

    local _MemBypass = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()

        if not checkcaller() then
            if typeof(self) == "Instance" and (method == "GetTotalMemoryUsageMb" or method == "getTotalMemoryUsageMb") and self.ClassName == "Stats" then
                return GetReturn()
            end
        end

        return _MemBypass(self, ...)
    end)

    local _MemBypassIndex = hookfunction(Stats.GetTotalMemoryUsageMb, function(self, ...)
        if not checkcaller() then
            if typeof(self) == "Instance" and self.ClassName == "Stats" then
                return GetReturn()
            end
        end
    end)
end)

-- Memory Bypass V2
task.spawn(function()
    repeat task.wait() until game:IsLoaded()

    local RunService = game:GetService("RunService")
    local Stats = game:GetService("Stats")

    local CurrMem = Stats:GetMemoryUsageMbForTag(Enum.DeveloperMemoryTag.Gui)
    local Rand = 0

    RunService.Stepped:Connect(function()
        local random = Random.new()
        Rand = random:NextNumber(-0.1, 0.1)
    end)

    local function GetReturn()
        return CurrMem + Rand
    end

    local _MemBypass = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()

        if not checkcaller() then
            if typeof(self) == "Instance" and (method == "GetMemoryUsageMbForTag" or method == "getMemoryUsageMbForTag") and self.ClassName == "Stats" then
                return GetReturn()
            end
        end

        return _MemBypass(self, ...)
    end)

    local _MemBypassIndex = hookfunction(Stats.GetMemoryUsageMbForTag, function(self, ...)
        if not checkcaller() then
            if typeof(self) == "Instance" and self.ClassName == "Stats" then
                return GetReturn()
            end
        end
    end)
end)
